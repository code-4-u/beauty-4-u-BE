<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beauty4u.backend.promotion.query.mapper.PromotionStatisticalMapper">

    <!-- 프로모션 종류 조회 -->
    <select id="findPromotionType" resultType="FindPromotionTypeResDTO">
        SELECT
               promotion_type_id,
               promotion_type_name
          FROM promotion_type;
    </select>

    <!-- 프로모션 검색 기능 -->
    <select id="findPromotion" resultType="FindPromotionResDTO">
        SELECT
               promotion_id,
               promotion_type_id,
               promotion_title,
               promotion_content,
               promotion_start_date,
               promotion_end_date,
               promotion_status
          FROM promotion
         WHERE 1=1
         <if test="searchKeyword != null and searchKeyword != ''">
           AND promotion_title LIKE CONCAT('%', trim(#{searchKeyword}), '%')
         </if>
         <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
           AND promotion_start_date BETWEEN #{startDate} AND #{endDate}
         </if>
         <if test="promotionTypeId != null and promotionTypeId != ''">
           AND promotion_type_id = #{promotionTypeId}
         </if>
         <if test="promotionStatus != null and promotionStatus != ''">
           AND promotion_Status = #{promotionStatus}
         </if>
    </select>

    <!-- 프로모션 타입별 조회 ASC 조회 -->
    <select id="findTypeByPromotion" resultType="FindPromotionByTypeResDTO">
        SELECT promotion_id,
               promotion_type_id,
               promotion_title
        FROM promotion p
        ORDER BY p.promotion_type_id
    </select>

    <!-- 프로모션 종류에 따른 년도별 그래프 조회 -->
    <select id="findPromotionByYearSales" parameterType="java.util.List" resultType="FindPromotionByYearSalesResDTO">
        <foreach item="promotionId" collection="list" separator="UNION ALL">
            SELECT
                   EXTRACT(YEAR FROM (SELECT promotion_start_date
                                        FROM promotion
                                       WHERE promotion_id = #{promotionId})) AS promo_year,
                   SUM(oi.order_price) AS total_promotion_sales
              FROM promotion_goods pg
              JOIN order_info oi ON pg.goods_code = oi.goods_code
             WHERE pg.promotion_id = #{promotionId}
               AND oi.created_date BETWEEN (SELECT promotion_start_date
                                              FROM promotion
                                             WHERE promotion_id = #{promotionId})
                                       AND (SELECT promotion_end_date
                                              FROM promotion
                                             WHERE promotion_id = #{promotionId})
               AND oi.order_status = 'PURCHASED'
        </foreach>
    </select>

    <!-- 프로모션 기간 적용 상품 리스트 조회 -->
    <select id="findPromotionByGoodsSales" parameterType="Integer" resultType="FindPromotionByGoodsSalesResDTO">
        SELECT (SELECT goods_name
                FROM goods
                WHERE goods_code = pro.goods_code) AS goods_name,
                total_goods_sales
          FROM (
                SELECT pg.goods_code,
                        SUM(oi.order_price) AS total_goods_sales
                  FROM promotion_goods pg
                  JOIN order_info oi ON pg.goods_code = oi.goods_code
                 WHERE pg.promotion_id = #{promotionId}
                   AND oi.created_date BETWEEN (SELECT promotion_start_date
                                                  FROM promotion
                                                 WHERE promotion_id = #{promotionId})
                                           AND (SELECT promotion_end_date
                                                  FROM promotion
                                                 WHERE promotion_id = #{promotionId})
                   AND oi.order_status = 'PURCHASED'
                 GROUP BY goods_code
                 ORDER BY SUM(oi.order_price) DESC) AS pro
    </select>


    <!-- 프로모션 기간 상품 매출 랭킹 비교 -->
    <select id="findPromotionByComparisonSales" resultType="FindPromotionByComparisonSalesResDTO">
        WITH sales_previous AS (
            SELECT
                  (SELECT goods_name
                     FROM goods
                    WHERE goods_code = oi.goods_code) AS goods_name,
                  SUM(oi.order_price) AS total_order_price,
                  ROW_NUMBER() OVER (ORDER BY SUM(oi.order_price) DESC) AS rank_sales_previous
             FROM order_info oi
             JOIN promotion p ON oi.created_date BETWEEN p.promotion_start_date AND p.promotion_end_date
            WHERE p.promotion_id  = #{previousPromotionId}
            GROUP BY goods_name
            ORDER BY rank_sales_previous
        ),
        sales_after AS (
            SELECT
                  (SELECT goods_name
                     FROM goods
                    WHERE Goods_code = oi.goods_code) AS goods_name,
                  SUM(oi.order_price) AS total_order_price,
                  ROW_NUMBER() OVER (ORDER BY SUM(oi.order_price) DESC) AS rank_sales_after
             FROM order_info oi
             JOIN promotion p ON oi.created_date BETWEEN p.promotion_start_date AND p.promotion_end_date
            WHERE p.promotion_id = #{afterPromotionId}
            GROUP BY goods_name
            ORDER BY rank_sales_after
        )
        SELECT
                COALESCE(s22.goods_name, s23.goods_name) AS goods_name,
                s22.total_order_price AS sales_year_previous,
                s23.total_order_price AS sales_year_after,
                s22.rank_sales_previous AS sales_rank_previous,
                s23.rank_sales_after AS sales_rank_after,
            CASE
                WHEN s22.rank_sales_previous IS NULL THEN '신규진입'
                WHEN s23.rank_sales_after IS NULL THEN '판매중단'
            ELSE CASE
                <![CDATA[
                    WHEN s22.rank_sales_previous - s23.rank_sales_after > 0 THEN CONCAT(ABS(s22.rank_sales_previous - s23.rank_sales_after), ' 단계 상승')
                    WHEN s22.rank_sales_previous - s23.rank_sales_after < 0 THEN CONCAT(ABS(s22.rank_sales_previous - s23.rank_sales_after), ' 단계 하락')
                    ELSE '변동없음'
                ]]>
                 END
            END AS rank_change,
        CASE
            <![CDATA[
            WHEN (s23.total_order_price - s22.total_order_price) / s22.total_order_price * 100 > 0
            THEN CONCAT(ROUND(ABS((s23.total_order_price - s22.total_order_price) / s22.total_order_price * 100), 1), '%', ' 증가')
            WHEN (s23.total_order_price - s22.total_order_price) / s22.total_order_price * 100 < 0
            THEN CONCAT(ROUND(ABS((s23.total_order_price - s22.total_order_price) / s22.total_order_price * 100), 1), '%', ' 감소')
            ELSE '변동없음'
            ]]>
        END AS sales_percent_change
        FROM sales_previous s22
        RIGHT JOIN sales_after s23 ON s22.goods_name = s23.goods_name
    </select>

    <!-- 비교 차트 띄우기 -->
    <select id="findPromotionComparison" resultType="FindPromotionByComparisonResDTO">
        WITH RankedSalesPrev AS (
            SELECT
                a.goods_name as goods_name1,
                COALESCE(a.total_goods_sales, 0) as sales1,
                ROW_NUMBER() OVER (ORDER BY a.total_goods_sales DESC) as rank1
            FROM (
                     SELECT
                             (SELECT goods_name FROM goods WHERE goods_code = pro.goods_code) AS goods_name,
                             total_goods_sales
                     FROM (
                              SELECT
                                  pg.goods_code,
                                  SUM(oi.order_price) AS total_goods_sales
                              FROM promotion_goods pg
                                       JOIN order_info oi ON pg.goods_code = oi.goods_code
                              WHERE pg.promotion_id = #{promotionId1}
                                AND oi.created_date BETWEEN
                                      (SELECT promotion_start_date FROM promotion WHERE promotion_id = #{promotionId1})
                                  AND (SELECT promotion_end_date FROM promotion WHERE promotion_id = #{promotionId1})
                                AND oi.order_status = 'PURCHASED'
                              GROUP BY goods_code
                          ) AS pro
                 ) AS a
        ),
             RankedSalesAfter AS (
                 SELECT
                     b.goods_name as goods_name2,
                     COALESCE(b.total_goods_sales, 0) as sales2,
                     ROW_NUMBER() OVER (ORDER BY b.total_goods_sales DESC) as rank2
                 FROM (
                          SELECT
                                  (SELECT goods_name FROM goods WHERE goods_code = pro.goods_code) AS goods_name,
                                  total_goods_sales
                          FROM (
                                   SELECT
                                       pg.goods_code,
                                       SUM(oi.order_price) AS total_goods_sales
                                   FROM promotion_goods pg
                                            JOIN order_info oi ON pg.goods_code = oi.goods_code
                                   WHERE pg.promotion_id = #{promotionId2}
                                     AND oi.created_date BETWEEN
                                           (SELECT promotion_start_date FROM promotion WHERE promotion_id = #{promotionId2})
                                       AND (SELECT promotion_end_date FROM promotion WHERE promotion_id = #{promotionId2})
                                     AND oi.order_status = 'PURCHASED'
                                   GROUP BY goods_code
                               ) AS pro
                      ) AS b
             ),
             TotalSales AS (
                 SELECT
                     COALESCE((SELECT SUM(total_goods_sales)
                               FROM (
                                        SELECT pg.goods_code,
                                               SUM(oi.order_price) AS total_goods_sales
                                        FROM promotion_goods pg
                                                 JOIN order_info oi ON pg.goods_code = oi.goods_code
                                        WHERE pg.promotion_id = #{promotionId1}
                                          AND oi.created_date BETWEEN
                                                (SELECT promotion_start_date FROM promotion WHERE promotion_id = #{promotionId1})
                                            AND (SELECT promotion_end_date FROM promotion WHERE promotion_id = #{promotionId1})
                                          AND oi.order_status = 'PURCHASED'
                                        GROUP BY pg.goods_code
                                    ) as prev_total), 0) as total_sales1,
                     COALESCE((SELECT SUM(total_goods_sales)
                               FROM (
                                        SELECT pg.goods_code,
                                               SUM(oi.order_price) AS total_goods_sales
                                        FROM promotion_goods pg
                                                 JOIN order_info oi ON pg.goods_code = oi.goods_code
                                        WHERE pg.promotion_id = #{promotionId2}
                                          AND oi.created_date BETWEEN
                                                (SELECT promotion_start_date FROM promotion WHERE promotion_id = #{promotionId2})
                                            AND (SELECT promotion_end_date FROM promotion WHERE promotion_id = #{promotionId2})
                                          AND oi.order_status = 'PURCHASED'
                                        GROUP BY pg.goods_code
                                    ) as current_total), 0) as total_sales2
             )
            (SELECT
                 COALESCE(t1.goods_name1, t2.goods_name2) as goods_name1,
                 t1.rank1 as prev_promotion_rank,
                 t2.rank2 as after_promotion_rank,
                 CASE
                     WHEN t1.rank1 IS NULL AND t2.rank2 IS NOT NULL THEN '신규 진입'
                     WHEN t1.rank1 IS NOT NULL AND t2.rank2 IS NOT NULL THEN
                         CASE
                             WHEN t1.rank1 = t2.rank2 THEN '→'
                             WHEN t1.rank1 > t2.rank2 THEN CONCAT('↑', t1.rank1 - t2.rank2)
                             ELSE CONCAT('↓', t2.rank2 - t1.rank1)
                             END
                     WHEN t1.rank1 IS NOT NULL AND t2.rank2 IS NULL THEN '제외'
                     END as rank_change
             FROM RankedSalesPrev t1
                      LEFT JOIN RankedSalesAfter t2 ON t1.goods_name1 = t2.goods_name2
             UNION
             SELECT
                 COALESCE(t1.goods_name1, t2.goods_name2) as goods_name1,
                 t1.rank1 as prev_promotion_rank,
                 t2.rank2 as after_promotion_rank,
                 CASE
                     WHEN t1.rank1 IS NULL AND t2.rank2 IS NOT NULL THEN '신규 진입'
                     WHEN t1.rank1 IS NOT NULL AND t2.rank2 IS NOT NULL THEN
                         CASE
                             WHEN t1.rank1 = t2.rank2 THEN '→'
                             WHEN t1.rank1 > t2.rank2 THEN CONCAT('↑', t1.rank1 - t2.rank2)
                             ELSE CONCAT('↓', t2.rank2 - t1.rank1)
                             END
                     WHEN t1.rank1 IS NOT NULL AND t2.rank2 IS NULL THEN '제외'
                     END as rank_change
             FROM RankedSalesPrev t1
                      RIGHT JOIN RankedSalesAfter t2 ON t1.goods_name1 = t2.goods_name2)
                ORDER BY COALESCE(after_promotion_rank, 999999);
    </select>

</mapper>