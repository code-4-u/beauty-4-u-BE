<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.beauty4u.backend.goods_rate.query.mapper.GoodsRateQueryMapper">
    <select id="findGoodsRate" resultType="GoodsRateQueryDTO">
        WITH
        current_period_sales AS (
        <!--        현재 기간 매출 합계 -->
        SELECT
        o.goods_code,
        g.goods_name,
        b.brand_name,
        SUM(o.order_count * o.order_price) as current_sales
        FROM order_info o
        JOIN goods g ON o.goods_code = g.goods_code
        JOIN brand b ON g.brand_code = b.brand_code
        WHERE o.order_status = 'PURCHASED'
        AND DATE(o.created_date) BETWEEN
        CASE #{periodType}
        WHEN 'DAILY' THEN DATE(#{endDate})
        WHEN 'WEEKLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 6 DAY)
        WHEN 'MONTHLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 29 DAY)
        WHEN 'QUARTER' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 89 DAY)
        WHEN 'HALF' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 179 DAY)
        WHEN 'YEARLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 364 DAY)
        END
        AND DATE(#{endDate})
        GROUP BY o.goods_code, g.goods_name, b.brand_name
        ),
        <!--        이전 기간 매출 합계 -->
        previous_period_sales AS
        (
        SELECT
        o.goods_code,
        SUM(o.order_count * o.order_price) as previous_sales
        FROM order_info o
        WHERE o.order_status = 'PURCHASED'
        AND DATE(o.created_date) BETWEEN
        CASE #{periodType}
        WHEN 'DAILY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 1 DAY)
        WHEN 'WEEKLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 13 DAY)
        WHEN 'MONTHLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 50 DAY)
        WHEN 'QUARTER' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 179 DAY)
        WHEN 'HALF' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 359 DAY)
        WHEN 'YEARLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 729 DAY)
        END
        AND
        CASE #{periodType}
        WHEN 'DAILY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 1 DAY)
        WHEN 'WEEKLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 7 DAY)
        WHEN 'MONTHLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 30 DAY)
        WHEN 'QUARTER' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 90 DAY)
        WHEN 'HALF' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 180 DAY)
        WHEN 'YEARLY' THEN DATE_SUB(DATE(#{endDate}), INTERVAL 365 DAY)
        END
        GROUP BY o.goods_code
        ),
        rate_calc AS
        (
        SELECT
        c.goods_code,
        c.goods_name,
        c.brand_name,
        c.current_sales,
        p.previous_sales,
        ((c.current_sales - p.previous_sales) / p.previous_sales * 100) as rate_value,
        CONCAT(
        ROUND(((c.current_sales - p.previous_sales) / p.previous_sales * 100), 2),
        '% (',
        FORMAT(p.previous_sales, 0),
        '원 → ',
        FORMAT(c.current_sales, 0),
        '원)'
        ) as rate_change
        FROM current_period_sales c
        INNER JOIN previous_period_sales p ON c.goods_code = p.goods_code
        WHERE p.previous_sales >= 0
        )
        SELECT * FROM (
        <!--        상승률 TOP 5-->
        (SELECT
        goods_name AS goodsName,
        brand_name AS brandName,
        rate_change AS rateChange,
        'INCREASE' AS rateType
        FROM rate_calc
        WHERE rate_value > 0
        ORDER BY rate_value DESC
        LIMIT 5)

        UNION ALL

        <!--         하락률 TOP 5-->
        (SELECT
        goods_name AS goodsName,
        brand_name AS brandName,
        rate_change AS rateChange,
        'DECREASE' AS rateType
        FROM rate_calc
        WHERE rate_value &lt; 0
        ORDER BY rate_value ASC
        LIMIT 5)
        ) result
    </select>
</mapper>