version: "3"

services:
  # Redis 서비스
  redis:
    image: redis:latest
    container_name: redis_beauty4u
    ports:
      - "${REDIS_PORT}:6379"


  # Zookeeper 서비스
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Kafka 서비스
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_CREATE_TOPICS: "Topic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock
    depends_on:
      - zookeeper

 # elk 서비스 - elasticsearch, kibana, logstash
  elasticsearch:
    container_name: elasticsearch_beauty4u
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "${ELASTIC_PORT}:9200"
    volumes:
      - ./elasticsearch:/usr/share/elasticsearch/data
    networks:
      - elk

  kibana:
    container_name: kibana_beauty4u
    image: docker.elastic.co/kibana/kibana:7.14.1
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - elk

  logstash:
    container_name: logstash_beauty4u
    image: docker.elastic.co/logstash/logstash:7.14.1
    ports:
      - 5000:5000
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - elk

networks:
  elk:
    driver: bridge

